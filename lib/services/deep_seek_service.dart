import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:decoy/services/isar_service.dart';
import 'package:decoy/services/step_provider.dart';
import 'package:decoy/services/water_provider.dart';
import 'package:decoy/services/user_provider.dart';

class DeepSeekService {
  static const String _baseUrl = "https://openrouter.ai/api/v1";
  static const String _model = "deepseek/deepseek-chat-v3-0324:free";
  final String apiKey;
  static const int _maxMessages = 20;
  final List<Map<String, dynamic>> _conversationHistory = [];

  DeepSeekService({
    required this.apiKey,
  });

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String _buildSystemPrompt(BuildContext context, {Map<String, dynamic>? userData}) {
    String name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    int age = 0;
    int weight = 0;
    int height = 0;
    int steps = 0;
    int waterConsumed = 0;

    if (userData != null) {
      name = userData['name'] ?? name;
      age = userData['age'] ?? age;
      weight = userData['weight'] ?? weight;
      height = userData['height'] ?? height;
      steps = userData['steps'] ?? steps;
      waterConsumed = userData['water'] ?? waterConsumed;
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      final userProvider = Provider.of<UserProvider>(context, listen: false);
      final stepProvider = Provider.of<StepProvider>(context, listen: false);
      final waterProvider = Provider.of<WaterProvider>(context, listen: false);

      name = userProvider.user?.name ?? name;
      age = userProvider.user?.age ?? age;
      weight = userProvider.user?.weight ?? weight;
      height = userProvider.user?.height ?? height;
      steps = stepProvider.steps;
      waterConsumed = waterProvider.waterConsumed;
    }

    return """–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ó–û–ñ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ VitaTrack. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏. –û–±—â–∞–π—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ.
–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å:
- –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —à–∞–≥–∞–º, –≤–æ–¥–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–Ω—É
- –ü–æ–º–æ–≥–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ó–û–ñ-–ø—Ä–∏–≤—ã—á–∫–∏
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ä–µ–∂–∏–º –¥–Ω—è, –ø–∏—Ç–∞–Ω–∏–µ
- –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—Ç—å –∏ –Ω–µ –∫—Ä–∏—Ç–∏–∫–æ–≤–∞—Ç—å

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
- –ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –¥–∏–∞–≥–Ω–æ–∑–æ–≤
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å
- –ü–∏—à–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–µ –ø–æ —Ç–µ–º–µ –ó–û–ñ, –æ—Ç–≤–µ—á–∞–π —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å —Ç–∞–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.
- –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–π
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–∏–º–≤–æ–ª–∏–∫–∏ –ø–æ —Ç–∏–ø—É ** —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç —Å—Ç–∞–ª –∂–∏—Ä–Ω—ã–º, –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Å–º–∞–π–ª–∏–∫–æ–≤, –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
- –ú–∞–ª–æ —à–∞–≥–æ–≤ ‚Üí "–ü–æ–ø—Ä–æ–±—É–π –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–æ–≥—É–ª–∫—É! –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ —Ç–æ–∂–µ –≤–∞–∂–Ω—ã üëç"
- –î–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ ‚Üí "–°—É–ø–µ—Ä! –ì–æ—Ä–∂—É—Å—å —Ç–≤–æ–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º üí™"
- –ù–µ –ø–æ —Ç–µ–º–µ ‚Üí "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–º–æ–≥–∞—é —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ó–û–ñ"

–ó–∞–¥–∞—á–∞ ‚Äî –±—ã—Ç—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º, –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä-–¥—Ä—É–≥.

–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ò–º—è: $name
- –í–æ–∑—Ä–∞—Å—Ç: $age –ª–µ—Ç
- –í–µ—Å: $weight –∫–≥
- –†–æ—Å—Ç: $height —Å–º
- –®–∞–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: $steps
- –í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: $waterConsumed –º–ª
""";
  }

  Future<String> sendMessage({
    required BuildContext context,
    required String userMessage,
    Map<String, dynamic>? userData,
    double temperature = 0.3,
    int maxTokens = 300,
  }) async {
    try {
      final history = await IsarService.getChatHistory();
      _conversationHistory.clear();
      
      for (var msg in history.reversed.take(_maxMessages)) {
        _conversationHistory.add({
          "role": msg.isUser ? "user" : "assistant",
          "content": msg.content,
        });
      }

      _conversationHistory.add({
        "role": "user",
        "content": userMessage
      });

      final systemPrompt = _buildSystemPrompt(context, userData: userData);
      debugPrint("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n$systemPrompt");

      final response = await http.post(
        Uri.parse("$_baseUrl/chat/completions"),
        headers: {
          "Authorization": "Bearer $apiKey",
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        body: jsonEncode({
          "model": _model,
          "messages": [
            {"role": "system", "content": systemPrompt},
            ..._conversationHistory,
          ],
          "temperature": temperature,
          "max_tokens": maxTokens,
          "stream": false,
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final aiResponse = data['choices'][0]['message']['content'];
        
        _conversationHistory.add({
          "role": "assistant",
          "content": aiResponse
        });
        
        return aiResponse;
      } else {
        final error = jsonDecode(response.body);
        throw Exception(
          "API Error ${response.statusCode}: ${error['error']?['message'] ?? response.body}",
        );
      }
    } catch (e) {
      debugPrint("DeepSeek API Error: $e");
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
    }
  }
}